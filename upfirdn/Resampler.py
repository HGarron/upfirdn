# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Resampler
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Resampler.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _Resampler.PySwigIterator_value(*args)
    def incr(*args): return _Resampler.PySwigIterator_incr(*args)
    def decr(*args): return _Resampler.PySwigIterator_decr(*args)
    def distance(*args): return _Resampler.PySwigIterator_distance(*args)
    def equal(*args): return _Resampler.PySwigIterator_equal(*args)
    def copy(*args): return _Resampler.PySwigIterator_copy(*args)
    def next(*args): return _Resampler.PySwigIterator_next(*args)
    def previous(*args): return _Resampler.PySwigIterator_previous(*args)
    def advance(*args): return _Resampler.PySwigIterator_advance(*args)
    def __eq__(*args): return _Resampler.PySwigIterator___eq__(*args)
    def __ne__(*args): return _Resampler.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _Resampler.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _Resampler.PySwigIterator___isub__(*args)
    def __add__(*args): return _Resampler.PySwigIterator___add__(*args)
    def __sub__(*args): return _Resampler.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _Resampler.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ResamplerRR(_object):
    """Proxy of C++ ResamplerRR class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerRR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerRR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int upRate, int downRate, double coefs) -> ResamplerRR"""
        this = _Resampler.new_ResamplerRR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerRR
    __del__ = lambda self : None;
    def apply(*args):
        """apply(self, double in, double out) -> int"""
        return _Resampler.ResamplerRR_apply(*args)

    def neededOutCount(*args):
        """neededOutCount(self, int inCount) -> int"""
        return _Resampler.ResamplerRR_neededOutCount(*args)

ResamplerRR_swigregister = _Resampler.ResamplerRR_swigregister
ResamplerRR_swigregister(ResamplerRR)

class ResamplerRC(_object):
    """Proxy of C++ ResamplerRC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerRC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerRC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int upRate, int downRate, complex<(double)> coefs) -> ResamplerRC"""
        this = _Resampler.new_ResamplerRC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerRC
    __del__ = lambda self : None;
    def apply(*args):
        """apply(self, double in, complex<(double)> out) -> int"""
        return _Resampler.ResamplerRC_apply(*args)

    def neededOutCount(*args):
        """neededOutCount(self, int inCount) -> int"""
        return _Resampler.ResamplerRC_neededOutCount(*args)

ResamplerRC_swigregister = _Resampler.ResamplerRC_swigregister
ResamplerRC_swigregister(ResamplerRC)

class ResamplerCR(_object):
    """Proxy of C++ ResamplerCR class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerCR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int upRate, int downRate, double coefs) -> ResamplerCR"""
        this = _Resampler.new_ResamplerCR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerCR
    __del__ = lambda self : None;
    def apply(*args):
        """apply(self, complex<(double)> in, complex<(double)> out) -> int"""
        return _Resampler.ResamplerCR_apply(*args)

    def neededOutCount(*args):
        """neededOutCount(self, int inCount) -> int"""
        return _Resampler.ResamplerCR_neededOutCount(*args)

ResamplerCR_swigregister = _Resampler.ResamplerCR_swigregister
ResamplerCR_swigregister(ResamplerCR)

class ResamplerCC(_object):
    """Proxy of C++ ResamplerCC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerCC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerCC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int upRate, int downRate, complex<(double)> coefs) -> ResamplerCC"""
        this = _Resampler.new_ResamplerCC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerCC
    __del__ = lambda self : None;
    def apply(*args):
        """apply(self, complex<(double)> in, complex<(double)> out) -> int"""
        return _Resampler.ResamplerCC_apply(*args)

    def neededOutCount(*args):
        """neededOutCount(self, int inCount) -> int"""
        return _Resampler.ResamplerCC_neededOutCount(*args)

ResamplerCC_swigregister = _Resampler.ResamplerCC_swigregister
ResamplerCC_swigregister(ResamplerCC)



